# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on:
  push:
    branches:
      - main
      - 'feature-**'
  pull_request:
    branches:
      - main
      - 'feature-**'

env:
  ANDROID_NDK_HOME: 

jobs:
  
  Build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: build-win,   os: windows-latest, shell: 'msys2 {0}', preset: "windows-x86_64-clang"}
        - { name: build-linux, os: ubuntu-latest,  shell: sh, preset: "linux-amd64-gcc" }
        - { name: build-mac,   os: macos-latest,   shell: sh, preset: "macos-arm64-clang" }
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: 'Setup MSYS2'
      if: ${{ contains( matrix.platform.name, 'win') }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: >-
          git
        pacboy: >-
          toolchain:u
          cmake:u
          ninja:u

    - name: Xcode Setup
      if: ${{ contains( matrix.platform.name, 'mac') }}
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Update Linux packages
      if: ${{ contains( matrix.platform.name, 'linux') }}
      run: sudo apt-get update
      
    - name: Install Linux Prerequisites
      if: ${{ contains( matrix.platform.name, 'linux') }}
      run: > 
        sudo apt-get install build-essential git make
        pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev
        libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libopenal-dev
        libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev
        libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev
        libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev
  
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Verify Ninja
      run: |
        which ninja
        ninja --version
    
    - name: Test Directory
      if: ${{ contains( matrix.platform.name, 'linux') }}
      run: | 
        pwd
        ls -lahG
        cat CMakePresets.json

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset ${{ matrix.platform.preset }}

    - name: Build
      run: cmake --build --preset ${{ matrix.platform.preset }}
    
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest -C Release --output-on-failure
        
    - name: Package
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cpack

    - name: 'Store artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: orionsort-${{ matrix.platform.name }}
        path: '${{ github.workspace }}/dist/*'


